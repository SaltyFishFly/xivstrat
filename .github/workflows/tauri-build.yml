name: Build Tauri App

on:
  push:
    tags:
      - 'v*.*.*' # 匹配 v1.0.0 格式的tag

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-latest
            args: --target universal-apple-darwin
          - platform: windows-latest
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取完整的git历史

      - name: Setup git config
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

      - name: Try to merge main branch (optional)
        id: merge_main
        continue-on-error: true
        shell: bash
        run: |
          git fetch origin main
          echo "Attempting to merge main branch..."
          if git merge origin/main --no-edit --no-ff; then
            echo "Successfully merged main branch"
            echo "merge_success=true" >> $GITHUB_OUTPUT
          else
            echo "Merge conflicts detected, aborting merge"
            git merge --abort
            echo "merge_success=false" >> $GITHUB_OUTPUT
            echo "::warning::Could not merge main branch due to conflicts. Building from current branch state."
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10.12.1

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Install frontend dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build Tauri app
        shell: bash
        run: |
          if [ "${{ matrix.platform }}" = "macos-latest" ]; then
            pnpm tauri build --target universal-apple-darwin
          else
            pnpm tauri build
          fi

      - name: Package and Upload artifacts (Windows)
        if: matrix.platform == 'windows-latest'
        shell: bash
        run: |
          # 找到生成的 exe 文件
          EXE_PATH=$(find src-tauri/target/release -name "*.exe" -not -path "*/deps/*" -not -path "*/build/*" | head -1)
          echo "Found exe: $EXE_PATH"

          # 创建 zip 包
          mkdir -p dist
          cp "$EXE_PATH" "dist/XivStrat.exe"
          cd dist
          powershell Compress-Archive -Path "XivStrat.exe" -DestinationPath "../XivStrat-tauri-Windows.zip"
          cd ..

      - name: Package and Upload artifacts (macOS)
        if: matrix.platform == 'macos-latest'
        shell: bash
        run: |
          # 找到生成的 app 文件夹
          APP_PATH=$(find src-tauri/target -name "*.app" -type d | head -1)
          echo "Found app: $APP_PATH"

          # 创建 zip 包
          mkdir -p dist
          cp -r "$APP_PATH" "dist/XivStrat.app"
          cd dist
          zip -r ../XivStrat-tauri-macOS.zip XivStrat.app
          cd ..

      # Electron 构建部分
      # - name: Build Electron app
      #   shell: bash
      #   run: |
      #     pnpm install
      #     pnpm build
      - name: Package Electron app (Windows)
        if: matrix.platform == 'windows-latest'
        shell: bash
        run: |
          pnpm build:electron
          pnpm exec electron-builder --config electron/electron-builder.json --win dir

          # 找到win-unpacked目录
          UNPACKED_DIR=$(find electron-dist -name "win-unpacked" -type d | head -1)

          if [ -d "$UNPACKED_DIR" ]; then
            echo "Found unpacked dir: $UNPACKED_DIR"
            # 创建zip包 - 使用解压版
            cd "$UNPACKED_DIR"
            powershell Compress-Archive -Path "*" -DestinationPath "../../XivStrat-electron-Windows.zip"
            cd ../..
          else
            echo "Error: win-unpacked directory not found!"
            exit 1
          fi

      - name: Package Electron app (macOS)
        if: matrix.platform == 'macos-latest'
        shell: bash
        run: |
          pnpm build:electron
          pnpm exec electron-builder --config electron/electron-builder.json --mac dir

          # 找到生成的 app 文件夹
          APP_PATH=$(find electron-dist/mac* -name "*.app" -type d | head -1)
          echo "Found app: $APP_PATH"

          # 创建 zip 包
          mkdir -p electron-zips
          cp -r "$APP_PATH" "electron-zips/XivStrat.app"
          cd electron-zips
          zip -r ../XivStrat-electron-macOS.zip XivStrat.app
          cd ..

      - name: Upload all build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-build
          path: |
            XivStrat-*.zip
          retention-days: 5

  release:
    permissions:
      contents: write
    needs: build
    runs-on: ubuntu-latest
    if: success()
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -la artifacts/*/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: XivStrat Desktop ${{ github.ref_name }}
          body: |
            ## 下载说明

            ### Tauri 版本
            - **Windows**: 下载 `XivStrat-tauri-Windows.zip`，解压后运行 `XivStrat.exe`
            - **macOS**: 下载 `XivStrat-tauri-macOS.zip`，解压后运行 `XivStrat.app`

            ### Electron 版本（备用选择）
            - **Windows**: 下载 `XivStrat-electron-Windows.zip`，解压后运行 `XivStrat.exe`
            - **macOS**: 下载 `XivStrat-electron-macOS.zip`，解压后运行 `XivStrat.app`

            ### 更新内容
            - 查看提交历史了解详细更新

            ### Mac版本注意事项
            - 先打开 `系统偏好设置 -> 安全与隐私 -> 通用` 选项卡，检查是否已经启用了 `任何来源` 选项。
            - 如果没有这个选项，复制以下面的命令：
              ```bash
              sudo spctl --master-disable
              ```
              执行后，安全与隐私 -> 通用 选项卡中会多出一个 `任何来源` 选项，选择即可。
            - 如果提示: `XivStrat.app已损坏无法打开。 你应该将它移到废纸篓`,请在终端执行：
              ```bash
              sudo xattr -rd com.apple.quarantine /存放地址/XivStrat.app
              ```
              然后重新打开 `XivStrat.app` 即可。
          draft: false
          prerelease: false
          files: |
            artifacts/**/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
